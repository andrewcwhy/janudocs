/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TermsImport } from './routes/terms'
import { Route as PrivacyImport } from './routes/privacy'
import { Route as ContactImport } from './routes/contact'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as DocsIndexImport } from './routes/docs/index'
import { Route as DocsDocImport } from './routes/docs/$doc'
import { Route as DocsCategoryCategoryImport } from './routes/docs/category/$category'
import { Route as DocsCategoryDocImport } from './routes/docs/$category/$doc'

// Create/Update Routes

const TermsRoute = TermsImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRoute,
} as any)

const PrivacyRoute = PrivacyImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRoute,
} as any)

const ContactRoute = ContactImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DocsIndexRoute = DocsIndexImport.update({
  id: '/docs/',
  path: '/docs/',
  getParentRoute: () => rootRoute,
} as any)

const DocsDocRoute = DocsDocImport.update({
  id: '/docs/$doc',
  path: '/docs/$doc',
  getParentRoute: () => rootRoute,
} as any)

const DocsCategoryCategoryRoute = DocsCategoryCategoryImport.update({
  id: '/docs/category/$category',
  path: '/docs/category/$category',
  getParentRoute: () => rootRoute,
} as any)

const DocsCategoryDocRoute = DocsCategoryDocImport.update({
  id: '/docs/$category/$doc',
  path: '/docs/$category/$doc',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactImport
      parentRoute: typeof rootRoute
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyImport
      parentRoute: typeof rootRoute
    }
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsImport
      parentRoute: typeof rootRoute
    }
    '/docs/$doc': {
      id: '/docs/$doc'
      path: '/docs/$doc'
      fullPath: '/docs/$doc'
      preLoaderRoute: typeof DocsDocImport
      parentRoute: typeof rootRoute
    }
    '/docs/': {
      id: '/docs/'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof DocsIndexImport
      parentRoute: typeof rootRoute
    }
    '/docs/$category/$doc': {
      id: '/docs/$category/$doc'
      path: '/docs/$category/$doc'
      fullPath: '/docs/$category/$doc'
      preLoaderRoute: typeof DocsCategoryDocImport
      parentRoute: typeof rootRoute
    }
    '/docs/category/$category': {
      id: '/docs/category/$category'
      path: '/docs/category/$category'
      fullPath: '/docs/category/$category'
      preLoaderRoute: typeof DocsCategoryCategoryImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/docs/$doc': typeof DocsDocRoute
  '/docs': typeof DocsIndexRoute
  '/docs/$category/$doc': typeof DocsCategoryDocRoute
  '/docs/category/$category': typeof DocsCategoryCategoryRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/docs/$doc': typeof DocsDocRoute
  '/docs': typeof DocsIndexRoute
  '/docs/$category/$doc': typeof DocsCategoryDocRoute
  '/docs/category/$category': typeof DocsCategoryCategoryRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/docs/$doc': typeof DocsDocRoute
  '/docs/': typeof DocsIndexRoute
  '/docs/$category/$doc': typeof DocsCategoryDocRoute
  '/docs/category/$category': typeof DocsCategoryCategoryRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/contact'
    | '/privacy'
    | '/terms'
    | '/docs/$doc'
    | '/docs'
    | '/docs/$category/$doc'
    | '/docs/category/$category'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/contact'
    | '/privacy'
    | '/terms'
    | '/docs/$doc'
    | '/docs'
    | '/docs/$category/$doc'
    | '/docs/category/$category'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/contact'
    | '/privacy'
    | '/terms'
    | '/docs/$doc'
    | '/docs/'
    | '/docs/$category/$doc'
    | '/docs/category/$category'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  ContactRoute: typeof ContactRoute
  PrivacyRoute: typeof PrivacyRoute
  TermsRoute: typeof TermsRoute
  DocsDocRoute: typeof DocsDocRoute
  DocsIndexRoute: typeof DocsIndexRoute
  DocsCategoryDocRoute: typeof DocsCategoryDocRoute
  DocsCategoryCategoryRoute: typeof DocsCategoryCategoryRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  ContactRoute: ContactRoute,
  PrivacyRoute: PrivacyRoute,
  TermsRoute: TermsRoute,
  DocsDocRoute: DocsDocRoute,
  DocsIndexRoute: DocsIndexRoute,
  DocsCategoryDocRoute: DocsCategoryDocRoute,
  DocsCategoryCategoryRoute: DocsCategoryCategoryRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/contact",
        "/privacy",
        "/terms",
        "/docs/$doc",
        "/docs/",
        "/docs/$category/$doc",
        "/docs/category/$category"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/contact": {
      "filePath": "contact.tsx"
    },
    "/privacy": {
      "filePath": "privacy.tsx"
    },
    "/terms": {
      "filePath": "terms.tsx"
    },
    "/docs/$doc": {
      "filePath": "docs/$doc.tsx"
    },
    "/docs/": {
      "filePath": "docs/index.tsx"
    },
    "/docs/$category/$doc": {
      "filePath": "docs/$category/$doc.tsx"
    },
    "/docs/category/$category": {
      "filePath": "docs/category/$category.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
